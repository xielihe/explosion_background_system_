# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2019-01-19 14:25
from __future__ import unicode_literals

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='userProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(max_length=6, verbose_name='人员姓名')),
                ('phone', models.CharField(blank=True, max_length=20, null=True, verbose_name='固话（查询）')),
                ('email', models.EmailField(blank=True, max_length=50, null=True, verbose_name='邮箱')),
                ('unit', models.EmailField(blank=True, max_length=40, null=True, verbose_name='单位')),
                ('department', models.EmailField(blank=True, max_length=40, null=True, verbose_name='部门')),
                ('posts', models.EmailField(blank=True, max_length=40, null=True, verbose_name='职务')),
                ('role', models.IntegerField(choices=[(1, '超级管理员'), (2, '管理员'), (3, '普通用户'), (4, '专家')], default=3, help_text='权限标识', verbose_name='权限标识')),
                ('isDelete', models.BooleanField(default=False, verbose_name='是否逻辑删除')),
                ('picUrl', models.ImageField(blank=True, null=True, upload_to='image/user/', verbose_name='头像路径')),
                ('note', models.CharField(blank=True, max_length=200, null=True, verbose_name='备注')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '用户',
                'verbose_name_plural': '用户',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='devDetect',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deviceName', models.CharField(blank=True, max_length=30, null=True, verbose_name='检测设备名称')),
                ('deviceVersion', models.CharField(blank=True, max_length=30, null=True, verbose_name='检测设备型号')),
                ('detectMrfs', models.CharField(blank=True, max_length=100, null=True, verbose_name='仪器厂家')),
                ('note', models.CharField(blank=True, max_length=400, null=True, verbose_name='备注')),
            ],
            options={
                'verbose_name': '检测设备信息表',
                'verbose_name_plural': '检测设备信息表',
            },
        ),
        migrations.CreateModel(
            name='methodDetect',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('method', models.CharField(blank=True, max_length=100, null=True, verbose_name='方法')),
                ('txtURL', models.FileField(blank=True, max_length=300, null=True, upload_to='file/methodDetect/', verbose_name='检测方法信息文档路径')),
            ],
            options={
                'verbose_name': '检测方法信息表 ',
                'verbose_name_plural': '检测方法信息表 ',
            },
        ),
    ]
