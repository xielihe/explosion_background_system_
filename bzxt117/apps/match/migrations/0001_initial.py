# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2019-01-19 14:25
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('evi', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('sample', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='devCompMatch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Score', models.FloatField(default=0.0, verbose_name='相似分')),
                ('isCheck', models.IntegerField(choices=[(1, '未核准'), (2, '匹配'), (3, '非匹配')], default=1, verbose_name='普通用户核准状态')),
                ('isExpertCheck', models.IntegerField(choices=[(1, '未核准'), (2, '匹配'), (3, '非匹配')], default=1, verbose_name='专家核准状态')),
                ('expertCompOpinion', models.CharField(blank=True, max_length=300, null=True, verbose_name='专家成分核准意见')),
                ('checkHandle', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='devCompMatchcheckHandle', to=settings.AUTH_USER_MODEL, verbose_name='普通核准人员（外键）')),
                ('devEvi', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='devCompMatchh', to='evi.devEvi', verbose_name='对应的物证')),
                ('devPartSample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='devCompMatch', to='sample.devPartSample', verbose_name='对应的样本')),
                ('expertHandle', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='devCompMatchexpertHandle', to=settings.AUTH_USER_MODEL, verbose_name='专家核准人员（外键）')),
            ],
            options={
                'verbose_name': '爆炸装置物证成分综合匹配结果表',
                'verbose_name_plural': '爆炸装置物证成分综合匹配结果表',
                'ordering': ['Score'],
            },
        ),
        migrations.CreateModel(
            name='devMatchFTIR',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Score', models.FloatField(default=0.0, verbose_name='相似分')),
                ('devEviFTIRTestFile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='devMatchFTIR', to='evi.devEviFTIRTestFile', verbose_name='对应的物证FTIR文件记录')),
                ('devPartSampleFTIRTestFile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='devMatchFTIRR', to='sample.devPartSampleFTIRTestFile', verbose_name='对应的样本FTIR文件记录')),
            ],
            options={
                'verbose_name': '爆炸装置物证FTIR匹配结果表',
                'verbose_name_plural': '爆炸装置物证FTIR匹配结果表',
                'ordering': ['Score'],
            },
        ),
        migrations.CreateModel(
            name='devMatchPDF',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('PDFURL', models.FileField(blank=True, max_length=300, null=True, upload_to='file/devMatchPDF/', verbose_name='爆炸装置物证报告文件路径')),
                ('devEvi', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='devMatchPDF', to='evi.devEvi', verbose_name='对应的物证')),
            ],
            options={
                'verbose_name': '爆炸装置物证报告文件表',
                'verbose_name_plural': '爆炸装置物证报告文件表',
            },
        ),
        migrations.CreateModel(
            name='devMatchRaman',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Score', models.FloatField(default=0.0, verbose_name='相似分')),
                ('devEviRamanTestFile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='devMatchRaman', to='evi.devEviRamanTestFile', verbose_name='对应的物证Raman文件记录')),
                ('devPartSampleRamanTestFile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='devMatchRaman', to='sample.devPartSampleRamanTestFile', verbose_name='对应的样本Raman文件记录')),
            ],
            options={
                'verbose_name': '爆炸装置物证Raman匹配结果表',
                'verbose_name_plural': '爆炸装置物证Raman匹配结果表',
                'ordering': ['Score'],
            },
        ),
        migrations.CreateModel(
            name='devMatchXRF',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('averScore', models.FloatField(default=0.0, verbose_name='平均相似分')),
                ('devEviXRFTestFile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='devMatchXRF', to='evi.devEviXRFTestFile', verbose_name='对应的物证XRF文件记录')),
                ('devPartSampleXRFTestFile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='devMatchXRF', to='sample.devPartSampleXRFTestFile', verbose_name='对应的样本XRF记录')),
            ],
            options={
                'verbose_name': '爆炸装置物证XRF匹配结果表',
                'verbose_name_plural': '爆炸装置物证XRF匹配结果表',
                'ordering': ['averScore'],
            },
        ),
        migrations.CreateModel(
            name='devShapeMatch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('isCircuit', models.BooleanField(default=False, verbose_name='是否是元器件匹配')),
                ('matchDegree', models.FloatField(default=0.0, verbose_name='得分')),
                ('matchSampleCoordi', models.CharField(blank=True, max_length=400, null=True, verbose_name='匹配的样本位置坐标')),
                ('matchEviCoordi', models.CharField(blank=True, max_length=400, null=True, verbose_name='匹配的物证位置坐标')),
                ('isSure', models.BooleanField(default=False, verbose_name='是否确认')),
                ('isCheck', models.IntegerField(choices=[(1, '未核准'), (2, '匹配'), (3, '非匹配')], default=1, verbose_name='普通用户核准状态')),
                ('isExpertCheck', models.IntegerField(choices=[(1, '未核准'), (2, '匹配'), (3, '非匹配')], default=1, verbose_name='专家核准状态')),
                ('expertShapeOpinion', models.CharField(blank=True, max_length=300, null=True, verbose_name='专家形态核准意见')),
                ('checkHandle', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='devShapeMatchcheckHandle', to=settings.AUTH_USER_MODEL, verbose_name='普通核准人员（外键）')),
                ('devShapeEvi', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='devShapeMatchEvi', to='evi.devShapeEvi', verbose_name='对应的物证')),
                ('devShapeSample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='devShapeMatchSample', to='sample.devShapeSample', verbose_name='对应的成分样本')),
                ('expertHandle', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='devShapeMatchexpertHandle', to=settings.AUTH_USER_MODEL, verbose_name='专家核准人员（外键）')),
            ],
            options={
                'verbose_name': '爆炸装置案件物证形态匹配结果表',
                'verbose_name_plural': '爆炸装置案件物证形态匹配结果表',
                'ordering': ['matchDegree'],
            },
        ),
        migrations.CreateModel(
            name='devSynMatch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ScoreComp', models.FloatField(default=0.0, verbose_name='成分相似分')),
                ('isCheckComp', models.IntegerField(choices=[(1, '未核准'), (2, '匹配'), (3, '非匹配')], default=1, verbose_name='成分普通用户核准状态')),
                ('isExpertCheckComp', models.IntegerField(choices=[(1, '未核准'), (2, '匹配'), (3, '非匹配')], default=1, verbose_name='成分专家核准状态')),
                ('expertCompOpinion', models.CharField(blank=True, max_length=300, null=True, verbose_name='专家成分核准意见')),
                ('ScoreShape', models.FloatField(default=0.0, verbose_name='图像相似分')),
                ('similarRect', models.CharField(blank=True, max_length=20, null=True, verbose_name='匹配的样本位置坐标')),
                ('isCheckShape', models.IntegerField(choices=[(1, '未核准'), (2, '匹配'), (3, '非匹配')], default=1, verbose_name='图像普通用户核准状态')),
                ('isExpertCheckShape', models.IntegerField(choices=[(1, '未核准'), (2, '匹配'), (3, '非匹配')], default=1, verbose_name='图像专家核准状态')),
                ('expertShapeOpinion', models.CharField(blank=True, max_length=300, null=True, verbose_name='专家形态核准意见')),
                ('checkHandleComp', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='devSynMatchcheckHandleComp', to=settings.AUTH_USER_MODEL, verbose_name='成分普通核准人员（外键）')),
                ('checkHandleShape', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='devSynMatchcheckHandleShape', to=settings.AUTH_USER_MODEL, verbose_name='图像普通核准人员（外键）')),
                ('devEviComp', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='devSynMatchDevEviComp', to='sample.devPartSample', verbose_name='成分比对对应的物证')),
                ('devEviShape', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='devSynMatch', to='evi.devEvi', verbose_name='图像比对对应的物证（外键）')),
                ('devPartSampleComp', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='devSynMatchDevPartSampleComp', to='evi.devEvi', verbose_name='成分比对对应的样本')),
                ('devPartSampleShape', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='devSynMatch', to='sample.devPartSample', verbose_name='图像比对对应的样本（外键）')),
                ('expertHandleComp', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='devSynMatchexpertHandleComp', to=settings.AUTH_USER_MODEL, verbose_name='成分专家核准人员（外键）')),
                ('expertHandleShape', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='devSynMatchexpertHandleShape', to=settings.AUTH_USER_MODEL, verbose_name='图像专家核准人员（外键）')),
            ],
            options={
                'verbose_name': '爆炸装置物证综合匹配结果表（成分+形态）',
                'verbose_name_plural': '爆炸装置物证综合匹配结果表（成分+形态）',
            },
        ),
        migrations.CreateModel(
            name='exploMatchFTIR',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Score', models.FloatField(default=0.0, verbose_name='相似分')),
                ('exploEviFTIRTestFile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='evi.exploEviFTIRTestFile', verbose_name='对应的物证FTIR文件记录')),
                ('exploSampleFTIRTestFile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sample.exploSampleFTIRTestFile', verbose_name='对应的样本FTIR文件记录')),
            ],
            options={
                'verbose_name': '炸药及原材料物证FTIR匹配结果表',
                'verbose_name_plural': '炸药及原材料物证FTIR匹配结果表',
                'ordering': ['Score'],
            },
        ),
        migrations.CreateModel(
            name='exploMatchGCMS',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('msName', models.CharField(blank=True, max_length=30, null=True, verbose_name='匹配的MS文件名称')),
                ('Score', models.FloatField(default=0.0, verbose_name='相似分')),
                ('exploEviGCMSFile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exploMatchGCMS', to='evi.exploEviGCMSFile', verbose_name='对应的物证GC-MS文件记录')),
                ('exploSampleGCMSFile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exploMatchGCMS', to='sample.exploSampleGCMSFile', verbose_name='对应的样本GC-MS文件记录')),
            ],
            options={
                'verbose_name': '炸药及原材料物证GC-MS匹配结果表',
                'verbose_name_plural': '炸药及原材料物证GC-MS匹配结果表',
                'ordering': ['Score'],
            },
        ),
        migrations.CreateModel(
            name='exploMatchRaman',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Score', models.FloatField(default=0.0, verbose_name='相似分')),
                ('exploEviRamanTestFile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='evi.exploEviRamanTestFile', verbose_name='对应的物证Raman文件记录')),
                ('exploSampleRamanTestFile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sample.exploSampleRamanTestFile', verbose_name='对应的样本Raman文件记录')),
            ],
            options={
                'verbose_name': '炸药及原材料物证Raman匹配结果表',
                'verbose_name_plural': '炸药及原材料物证Raman匹配结果表',
                'ordering': ['Score'],
            },
        ),
        migrations.CreateModel(
            name='exploMatchXRD',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Score', models.FloatField(default=0.0, verbose_name='相似分')),
                ('exploEviXRDTestFile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='evi.exploEviXRDTestFile', verbose_name='对应的物证XRD文件记录')),
                ('exploSampleXRDTestFile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sample.exploSampleXRDTestFile', verbose_name='对应的样本XRD文件记录')),
            ],
            options={
                'verbose_name': ' 炸药及原材料物证XRD匹配结果表',
                'verbose_name_plural': ' 炸药及原材料物证XRD匹配结果表',
                'ordering': ['Score'],
            },
        ),
        migrations.CreateModel(
            name='exploMatchXRF',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('averScore', models.FloatField(default=0.0, verbose_name='平均相似分')),
                ('exploEviXRFTestFile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='evi.exploEviXRFTestFile', verbose_name='对应的物证XRF文件记录')),
                ('exploSampleXRFTestFile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sample.exploSampleXRFTestFile', verbose_name='对应的样本XRF文件记录')),
            ],
            options={
                'verbose_name': '炸药及原材料物证XRF匹配结果表',
                'verbose_name_plural': '炸药及原材料物证XRF匹配结果表',
                'ordering': ['averScore'],
            },
        ),
        migrations.CreateModel(
            name='exploReportMatch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Score', models.FloatField(default=0.0, verbose_name='相似分')),
                ('isCheck', models.IntegerField(choices=[(1, '未核准'), (2, '匹配'), (3, '非匹配')], default=1, verbose_name='普通用户核准状态')),
                ('isExpertCheck', models.IntegerField(choices=[(1, '未核准'), (2, '匹配'), (3, '非匹配')], default=1, verbose_name='专家核准状态')),
                ('expertOpinion', models.CharField(blank=True, max_length=300, null=True, verbose_name='专家核准意见')),
                ('checkHandle', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='exploReportMatchcheckHandle', to=settings.AUTH_USER_MODEL, verbose_name='普通核准人员（外键）')),
                ('expertHandle', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='exploReportMatchexpertHandle', to=settings.AUTH_USER_MODEL, verbose_name='专家核准人员（外键）')),
                ('exploEvi', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exploReportMatch', to='evi.exploEvi', verbose_name='对应的物证')),
                ('exploSample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exploReportMatch', to='sample.exploSample', verbose_name='对应的样本')),
            ],
            options={
                'verbose_name': '炸药及原材料物证报告结果表',
                'verbose_name_plural': '炸药及原材料物证报告结果表',
            },
        ),
        migrations.CreateModel(
            name='exploReportMatchPDF',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('PDFURL', models.FileField(blank=True, max_length=300, null=True, upload_to='file/exploReportMatchPDF/', verbose_name='炸药及原材料物证报告文件路径')),
                ('exploEvi', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exploReportMatchPDF', to='evi.exploEvi', verbose_name='对应的物证')),
            ],
            options={
                'verbose_name': '炸药及原材料物证报告文件表',
                'verbose_name_plural': '炸药及原材料物证报告文件表',
            },
        ),
        migrations.CreateModel(
            name='exploSynMatch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Score', models.FloatField(default=0.0, verbose_name='相似分')),
                ('isCheck', models.IntegerField(choices=[(1, '未核准'), (2, '匹配'), (3, '非匹配')], default=1, verbose_name='普通用户核准状态')),
                ('isExpertCheck', models.IntegerField(choices=[(1, '未核准'), (2, '匹配'), (3, '非匹配')], default=1, verbose_name='专家核准状态')),
                ('expertOpinion', models.CharField(blank=True, max_length=300, null=True, verbose_name='专家核准意见')),
                ('checkHandle', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='exploSynMatchcheckHandle', to=settings.AUTH_USER_MODEL, verbose_name='普通核准人员（外键）')),
                ('expertHandle', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='exploSynMatchexpertHandle', to=settings.AUTH_USER_MODEL, verbose_name='专家核准人员（外键）')),
                ('exploEvi', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exploSynMatch', to='evi.exploEvi', verbose_name='对应的物证')),
                ('exploSample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exploSynMatch', to='sample.exploSample', verbose_name='对应的样本')),
            ],
            options={
                'verbose_name': '炸药及原材料物证综合匹配结果表',
                'verbose_name_plural': '炸药及原材料物证综合匹配结果表',
                'ordering': ['Score'],
            },
        ),
        migrations.CreateModel(
            name='logoImgMatch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Score', models.FloatField(default=0.0, verbose_name='相似分')),
                ('similarRect', models.CharField(blank=True, max_length=20, null=True, verbose_name='匹配的样本位置坐标')),
                ('smallPicURL', models.ImageField(blank=True, max_length=300, null=True, upload_to='', verbose_name='缩略小图图像文件路径')),
                ('isCheck', models.IntegerField(choices=[(1, '未核准'), (2, '匹配'), (3, '非匹配')], default=1, verbose_name='普通用户核准状态')),
                ('isExpertCheck', models.IntegerField(choices=[(1, '未核准'), (2, '匹配'), (3, '非匹配')], default=1, verbose_name='专家核准状态')),
                ('expertShapeOpinion', models.CharField(blank=True, max_length=300, null=True, verbose_name='专家形态核准意见')),
                ('checkHandle', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='logoImgMatchcheckHandle', to=settings.AUTH_USER_MODEL, verbose_name='普通核准人员（外键）')),
                ('expertHandle', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='logoImgMatchexpertHandle', to=settings.AUTH_USER_MODEL, verbose_name='专家核准人员（外键）')),
                ('logoImgEvi', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logoImgMatch', to='evi.logoImgEvi', verbose_name='对应的物证')),
                ('logoImgSample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logoImgMatch', to='sample.logoImgSample', verbose_name='对应的样本')),
            ],
            options={
                'verbose_name': '爆炸装置物证商标图像匹配结果表',
                'verbose_name_plural': '爆炸装置物证商标图像匹配结果表',
                'ordering': ['Score'],
            },
        ),
        migrations.CreateModel(
            name='oPartImgMatch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Score', models.FloatField(default=0.0, verbose_name='相似分')),
                ('similarRect', models.CharField(blank=True, max_length=20, null=True, verbose_name='匹配的样本位置坐标')),
                ('smallPicURL', models.ImageField(blank=True, max_length=300, null=True, upload_to='', verbose_name='缩略小图图像文件路径')),
                ('isCheck', models.IntegerField(choices=[(1, '未核准'), (2, '匹配'), (3, '非匹配')], default=1, verbose_name='普通用户核准状态')),
                ('isExpertCheck', models.IntegerField(choices=[(1, '未核准'), (2, '匹配'), (3, '非匹配')], default=1, verbose_name='专家核准状态')),
                ('expertShapeOpinion', models.CharField(blank=True, max_length=300, null=True, verbose_name='专家形态核准意见')),
                ('checkHandle', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='oPartImgMatchcheckHandle', to=settings.AUTH_USER_MODEL, verbose_name='普通核准人员（外键）')),
                ('expertHandle', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='oPartImgMatchexpertHandle', to=settings.AUTH_USER_MODEL, verbose_name='专家核准人员（外键）')),
                ('oPartImgEvi', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='oPartImgMatch', to='evi.oPartImgEvi', verbose_name='对应的物证')),
                ('oPartImgSample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='oPartImgMatch', to='sample.oPartImgSample', verbose_name='对应的样本')),
            ],
            options={
                'verbose_name': ' 爆炸装置物证其它零件图像（也包括组件外壳）匹配结果表',
                'verbose_name_plural': ' 爆炸装置物证其它零件图像（也包括组件外壳）匹配结果表',
                'ordering': ['Score'],
            },
        ),
        migrations.CreateModel(
            name='PCBImgMatch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Score', models.FloatField(default=0.0, verbose_name='相似分')),
                ('similarRect', models.CharField(blank=True, max_length=20, null=True, verbose_name='匹配的样本位置坐标')),
                ('smallPicURL', models.ImageField(blank=True, max_length=300, null=True, upload_to='', verbose_name='缩略小图图像文件路径')),
                ('isCheck', models.IntegerField(choices=[(1, '未核准'), (2, '匹配'), (3, '非匹配')], default=1, verbose_name='普通用户核准状态')),
                ('isExpertCheck', models.IntegerField(choices=[(1, '未核准'), (2, '匹配'), (3, '非匹配')], default=1, verbose_name='专家核准状态')),
                ('expertShapeOpinion', models.CharField(blank=True, max_length=300, null=True, verbose_name='专家形态核准意见')),
                ('PCBImgEvi', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='PCBImgMatch', to='evi.PCBImgEvi', verbose_name='对应的物证')),
                ('PCBImgSample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='PCBImgMatch', to='sample.PCBImgSample', verbose_name='对应的样本')),
                ('checkHandle', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='PCBImgMatchcheckHandle', to=settings.AUTH_USER_MODEL, verbose_name='普通核准人员（外键）')),
                ('expertHandle', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='PCBImgMatchexpertHandle', to=settings.AUTH_USER_MODEL, verbose_name='专家核准人员（外键）')),
            ],
            options={
                'verbose_name': '爆炸装置物证电路板匹配结果表',
                'verbose_name_plural': '爆炸装置物证电路板匹配结果表',
                'ordering': ['Score'],
            },
        ),
        migrations.AlterUniqueTogether(
            name='explomatchxrf',
            unique_together=set([('exploSampleXRFTestFile', 'exploEviXRFTestFile')]),
        ),
        migrations.AlterUniqueTogether(
            name='explomatchxrd',
            unique_together=set([('exploSampleXRDTestFile', 'exploEviXRDTestFile')]),
        ),
        migrations.AlterUniqueTogether(
            name='explomatchraman',
            unique_together=set([('exploSampleRamanTestFile', 'exploEviRamanTestFile')]),
        ),
        migrations.AlterUniqueTogether(
            name='explomatchgcms',
            unique_together=set([('exploSampleGCMSFile', 'exploEviGCMSFile')]),
        ),
        migrations.AlterUniqueTogether(
            name='explomatchftir',
            unique_together=set([('exploSampleFTIRTestFile', 'exploEviFTIRTestFile')]),
        ),
        migrations.AlterUniqueTogether(
            name='devmatchxrf',
            unique_together=set([('devPartSampleXRFTestFile', 'devEviXRFTestFile')]),
        ),
        migrations.AlterUniqueTogether(
            name='devmatchraman',
            unique_together=set([('devPartSampleRamanTestFile', 'devEviRamanTestFile')]),
        ),
        migrations.AlterUniqueTogether(
            name='devmatchftir',
            unique_together=set([('devPartSampleFTIRTestFile', 'devEviFTIRTestFile')]),
        ),
    ]
